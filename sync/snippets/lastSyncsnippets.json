{"ref":"7bda5a65-1adf-4610-90a4-d159dfd4c1ec","syncData":{"version":1,"machineId":"f08ec5e9-8b07-4860-aa1a-8015152242e3","content":"{\"cpp.json\":\"{\\n\\t// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\n\\n\\t\\n\\t\\n\\t\\\"cpp_cout\\\": {\\n\\t\\t\\t\\\"prefix\\\": \\\"xyz\\\",\\n\\t\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\t\\\"cout<<${0:${SELECTION}}<<endl;\\\"\\n\\t\\t\\t],\\n\\t\\t\\t\\\"description\\\": \\\"py_print\\\"\\n\\t\\t},\\n\\t\\n\\t\\n\\t// \\\"py_function\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"zxvxs\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"$1(${2:${SELECTION}})\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"py_function\\\"\\n\\t// },\\n\\t\\n\\t// \\\"py_codeCell\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"codeCell\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"# %%\\\\n\\\"\\n\\t\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"py_codeCell\\\"\\n\\t// },\\n\\t\\n\\t// \\\"py_markdownCell\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"markdownCell\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"# %% [markdown] \\\\n# \\\"\\n\\t\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"markdownCell\\\"\\n\\t// },\\n\\t\\n\\t\\n}\\n\\n\\n\",\"markdown.json\":\"{\\n\\t// Place your snippets for markdown here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\n\\t\\\"md_python\\\": {\\n\\t\\t\\\"prefix\\\": \\\"f\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"```python\\\",\\n\\t\\t\\t\\\"$1\\\",\\n\\t\\t\\t\\\"```\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"md_python\\\"\\n\\t},\\n\\n}\",\"python.json\":\"{\\n\\t// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\n\\t// more info: https://code.visualstudio.com/docs/editor/userdefinedsnippets#:~:text=Code%20snippets%20are%20templates%20that,Snippet%20in%20the%20Command%20Palette).\\n\\t// NOTE: we can use `TM_SELECTED_TEXT` instead of `SELECTION`\\n\\n\\t// add print to the highlighted text\\n\\t\\\"py_print\\\": {\\n\\t\\t\\\"prefix\\\": \\\"xyz\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"print(${0:${SELECTION}})\\\" // with $0, the selection will be highlighted\\n\\t\\t\\t// \\\"print(${SELECTION})\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"py_print\\\"\\n\\t},\\n\\n\\t// for using latest f-string feature (py 3.8) to debug\\n\\t\\\"py_fprint\\\": {\\n\\t\\t\\\"prefix\\\": \\\"xyzw\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t// \\\"print(f\\\\\\\"{${0:${SELECTION}} = }\\\\\\\")\\\"\\n\\t\\t\\t\\\"print(f\\\\\\\"{${SELECTION} = }\\\\\\\")\\\" // `\\\\` is for escaping\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"py_fprint\\\"\\n\\t},\\n\\t\\n\\t// for printing dataframe, so that we have a black line before printing\\n\\t\\\"py_fprint_nl\\\": {\\n\\t\\t\\\"prefix\\\": \\\"xyzw\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"print(f\\\\\\\"\\\\\\\"\\\\\\\"{${0:${SELECTION}} = \\\\n}\\\\\\\"\\\\\\\"\\\\\\\")\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"py_fprint_nl\\\"\\n\\t},\\n\\n\\n\\t\\\"py_function\\\": {\\n\\t\\t\\\"prefix\\\": \\\"zxvxs\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"$1(${2:${SELECTION}})\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"py_function\\\"\\n\\t},\\n\\n\\t// for python interactive mode\\n\\t\\\"py_codeCell\\\": {\\n\\t\\t\\\"prefix\\\": \\\"codeCell\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"# %%\\\\n\\\"\\n\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"py_codeCell\\\"\\n\\t},\\n\\n\\t// for python interactive mode\\n\\t\\\"py_markdownCell\\\": {\\n\\t\\t\\\"prefix\\\": \\\"markdownCell\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"# %% [markdown] \\\\n# \\\"\\n\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"markdownCell\\\"\\n\\t},\\n\\n\\t// for loop\\n\\t\\\"for_loop_range\\\": {\\n\\t\\\"prefix\\\": [\\\"for_range\\\"],\\n\\t\\\"body\\\": [\\n\\t\\t//    \\\"for ${1:item} in ${2:sequence}:\\\",\\n\\t\\t\\\"for ${1:i} in range(${2:10}):\\\",\\n\\t\\t\\\"\\\\t${3:pass}\\\",\\n\\t\\t\\\"$0\\\"\\n\\t],\\n\\t\\\"description\\\": \\\"for loop with range\\\"\\n\\t},\\n\\n\\t\\\"create_function\\\": {\\n\\t\\\"prefix\\\": [\\\"def\\\"],\\n\\t\\\"body\\\": [\\n\\t\\t//    \\\"for ${1:item} in ${2:sequence}:\\\",\\n\\t\\t\\\"def ${1:f}(${2:x}):\\\",\\n\\t\\t\\\"\\\\t${3:pass}\\\",\\n\\t\\t\\\"$0\\\"\\n\\t],\\n\\t\\\"description\\\": \\\"for loop with range\\\"\\n\\t},\\n\\n\\t\\n\\n\\t/* --------------------------------- testing -------------------------------- */\\n\\t// remember:\\n\\t// use ${3|one,two,three|} to indicate choices\\n\\t// \\n\\t\\\"testing\\\": {\\n\\t\\\"prefix\\\": \\\"testing\\\",\\n\\t\\\"body\\\": [\\n\\t\\t// \\\"${CURRENT_YEAR:default}\\\",\\n\\t\\t\\\"hello: ${TM_SELECTED_TEXT:default}\\\",\\n\\t\\t// \\\"${1:another ${2:placeholder}}\\\",\\n\\t\\t// \\\"for $0 then $1 do $2 then \\\",\\n\\t\\t// \\\"${3|one,two,three|}\\\",\\n\\t],\\n\\t\\\"description\\\": \\\"Python for loop\\\"\\n\\t}\\n\\n\\t\\n\\n}\"}"}}