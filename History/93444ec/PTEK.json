// Empty

[
    {
        "key": "ctrl+b",
        "command": "python.execInTerminal",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'python'"
    },
    {
        "key": "f1",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+/",
        "command": "-editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+f1",
        "command": "editor.action.blockComment",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+shift+/",
        "command": "-editor.action.blockComment",
        "when": "editorFocus"
    },
    {
        "key": "alt+f1",
        "command": "latex-workshop.view",
        "when": "!config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "ctrl+alt+v",
        "command": "-latex-workshop.view",
        "when": "!config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "ctrl+1",
        "command": "editor.action.insertSnippet",
        "when": "editorLangId == 'python'",
        "args": {
            "name": "py_print"
        }
    },
    {
        "key": "ctrl+shift+1",
        "command": "editor.action.insertSnippet",
        "when": "editorLangId == 'python'",
        "args": {
            "name": "py_fprint"
        }
    },
    {
        "key": "ctrl+shift+cmd+1",
        "command": "editor.action.insertSnippet",
        "when": "editorLangId == 'python'",
        "args": {
            "name": "py_fprint_nl"
        }
    },
    {
        "key": "ctrl+1",
        "command": "editor.action.insertSnippet",
        "when": "editorLangId == 'cpp'",
        "args": {
            "name": "cpp_cout"
        }
    },
    {
        "key": "ctrl+2",
        "command": "editor.action.insertSnippet",
        "args": {
            "name": "py_function"
        }
    },
    {
        "key": "ctrl+3",
        "command": "editor.action.insertSnippet",
        "args": {
            "name": "py_codeCell"
        }
    },
    {
        "key": "ctrl+4",
        "command": "editor.action.insertSnippet",
        "args": {
            "name": "py_markdownCell"
        }
    },
    {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+e",
        "command": "editor.action.smartSelect.grow",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+space",
        "command": "-editor.action.smartSelect.grow",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+f12",
        "command": "-editor.action.showContextMenu",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "ctrl+pageup",
        "command": "-workbench.action.previousEditor"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-workbench.action.nextEditor"
    },
    {
        "key": "alt+b",
        "command": "BuildSystem.build"
    },
    {
        "key": "alt+win+b",
        "command": "-BuildSystem.build"
    },
    {
        "key": "alt+s",
        "command": "expand-selection-to-scope.expand"
    },
    {
        "key": "alt+left",
        "command": "-cursorWordStartLeft",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+right",
        "command": "-cursorWordEndRight",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+1",
        "command": "workbench.action.focusFirstEditorGroup"
    },
    {
        "key": "ctrl+1",
        "command": "-workbench.action.focusFirstEditorGroup"
    },
    {
        "key": "alt+2",
        "command": "workbench.action.focusSecondEditorGroup"
    },
    {
        "key": "ctrl+2",
        "command": "-workbench.action.focusSecondEditorGroup"
    },
    {
        "key": "alt+b",
        "command": "latex-workshop.synctex",
        "when": "editorTextFocus && !config.latex-workshop.bind.altKeymap.enabled && editorLangId == 'latex'"
    },
    {
        "key": "ctrl+alt+j",
        "command": "-latex-workshop.synctex",
        "when": "editorTextFocus && !config.latex-workshop.bind.altKeymap.enabled && editorLangId == 'latex'"
    },
    {
        "key": "ctrl+e",
        "command": "expand_region",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+w",
        "command": "-expand_region",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+`",
        "command": "workbench.action.navigateEditorGroups"
    },
    // {
    //     "key": "ctrl+`",
    //     "command": "workbench.action.terminal.toggleTerminal"
    // },

    // Toggle between terminal and editor focus
    { 
        "key": "ctrl+`", "command": "workbench.action.terminal.focus"
    },
    { 
        "key": "ctrl+`", "command": "workbench.action.focusActiveEditorGroup", "when": "terminalFocus"
    },

    
    {
        "key": "ctrl+`",
        "command": "-workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "ctrl+shift+v",
        "command": "-workbench.action.terminal.paste",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+v",
        "command": "extension.paste-and-indent"
    },
    {
        "key": "alt+f1",
        "command": "jupyter.runcurrentcell",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },


    {
        "key": "ctrl+enter",
        "command": "notebook.cell.execute",
        "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0"
    },

 


    {
        "key": "alt+f2",
        "command": "jupyter.runallcells",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    // {
    //     "key": "ctrl+alt+r",
    //     "command": "workbench.action.openRecent"
    // },
    // {
    //     "key": "ctrl+r",
    //     "command": "-workbench.action.openRecent"
    // },
    {
        "key": "ctrl+alt+e",
        "command": "undo_expand_region",
        "when": "editorHasSelection && editorTextFocus"
    },
    {
        "key": "ctrl+shift+w",
        "command": "-undo_expand_region",
        "when": "editorHasSelection && editorTextFocus"
    },
    {
        "key": "ctrl+down",
        "command": "-indentation-level-movement.moveDown",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+up",
        "command": "-indentation-level-movement.moveUp",
        "when": "editorTextFocus"
    },
    // {
    //     "key": "alt+down",
    //     "command": "-editor.action.moveLinesDownAction",
    //     "when": "editorTextFocus && !editorReadonly"
    // },
    // {
    //     "key": "alt+up",
    //     "command": "-editor.action.moveLinesUpAction",
    //     "when": "editorTextFocus && !editorReadonly"
    // },
    // {
    //     "key": "alt+up",
    //     "command": "scrollkey.up1",
    //     "when": "editorTextFocus"
    // },
    // {
    //     "key": "alt+down",
    //     "command": "scrollkey.down1",
    //     "when": "editorTextFocus"
    // },
    {
        "key": "alt+f1",
        "command": "-editor.action.showAccessibilityHelp",
        "when": "editorFocus"
    },
    {
        "key": "alt+f1",
        "command": "-editor.action.showAccessibilityHelp"
    },
    {
        "key": "ctrl+alt+backspace",
        "command": "extension.removeOnSelectedLines"
    },
    {
        "key": "ctrl+shift+a ctrl+shift+z",
        "command": "-extension.removeOnSelectedLines"
    },
    {
        "key": "ctrl+t",
        "command": "extension.transpose"
    },
    {
        "key": "ctrl+shift+up",
        "command": "editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+up",
        "command": "-editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+down",
        "command": "editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+down",
        "command": "-editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+b",
        "command": "-markdown.extension.editing.toggleBold",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "shift+cmd+l",
        "command": "editor.action.insertCursorAtEndOfEachLineSelected",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+i",
        "command": "-editor.action.insertCursorAtEndOfEachLineSelected",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+cmd+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+d",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+left",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "ctrl+right",
        "command": "workbench.action.navigateForward"
    },
    {
        "key": "alt+enter",
        "command": "notebook.cell.execute",
        "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0"
    },
    {
        "key": "alt+enter",
        "command": "-notebook.cell.executeAndInsertBelow",
        "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0"
    },
    {
        "key": "alt+enter",
        "command": "-jupyter.runcurrentcellandaddbelow",
        "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
    },
    {
        "key": "alt+enter",
        "command": "jupyter.runcurrentcell",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+alt+down",
        "command": "scrollLineDown",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+alt+up",
        "command": "scrollLineUp",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+cmd+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+enter",
        "command": "-editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+enter",
        "command": "-editor.action.insertLineBefore",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+h",
        "command": "-testing.toggleTestingPeekHistory",
        "when": "testing.isPeekVisible"
    },

    {
        "key": "ctrl+shift+b",
        "command": "extension.breakFromComma",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+escape",
        "command": "notebook.cell.execute",
        "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0"
    },
    {
        "key": "cmd+u",
        "command": "cursorUndo",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+u",
        "command": "-cursorUndo",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+-",
        "command": "workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    {
        "key": "ctrl+-",
        "command": "-workbench.action.navigateBack",
        "when": "canNavigateBack"
    }
]